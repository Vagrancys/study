package com.vagrancy.study.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.vagrancy.study.model.knowledge.entity.Knowledge;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KNOWLEDGE".
*/
public class KnowledgeDao extends AbstractDao<Knowledge, Long> {

    public static final String TABLENAME = "KNOWLEDGE";

    /**
     * Properties of entity Knowledge.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Knowledge_content = new Property(1, String.class, "knowledge_content", false, "KNOWLEDGE_CONTENT");
        public final static Property Knowledge_save_time = new Property(2, long.class, "knowledge_save_time", false, "KNOWLEDGE_SAVE_TIME");
        public final static Property Knowledge_state = new Property(3, int.class, "knowledge_state", false, "KNOWLEDGE_STATE");
        public final static Property Knowledge_class = new Property(4, long.class, "knowledge_class", false, "KNOWLEDGE_CLASS");
    }

    private Query<Knowledge> knowledgeClass_KnowledgeListQuery;

    public KnowledgeDao(DaoConfig config) {
        super(config);
    }
    
    public KnowledgeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KNOWLEDGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"KNOWLEDGE_CONTENT\" TEXT," + // 1: knowledge_content
                "\"KNOWLEDGE_SAVE_TIME\" INTEGER NOT NULL ," + // 2: knowledge_save_time
                "\"KNOWLEDGE_STATE\" INTEGER NOT NULL ," + // 3: knowledge_state
                "\"KNOWLEDGE_CLASS\" INTEGER NOT NULL );"); // 4: knowledge_class
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KNOWLEDGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Knowledge entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String knowledge_content = entity.getKnowledge_content();
        if (knowledge_content != null) {
            stmt.bindString(2, knowledge_content);
        }
        stmt.bindLong(3, entity.getKnowledge_save_time());
        stmt.bindLong(4, entity.getKnowledge_state());
        stmt.bindLong(5, entity.getKnowledge_class());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Knowledge entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String knowledge_content = entity.getKnowledge_content();
        if (knowledge_content != null) {
            stmt.bindString(2, knowledge_content);
        }
        stmt.bindLong(3, entity.getKnowledge_save_time());
        stmt.bindLong(4, entity.getKnowledge_state());
        stmt.bindLong(5, entity.getKnowledge_class());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Knowledge readEntity(Cursor cursor, int offset) {
        Knowledge entity = new Knowledge( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // knowledge_content
            cursor.getLong(offset + 2), // knowledge_save_time
            cursor.getInt(offset + 3), // knowledge_state
            cursor.getLong(offset + 4) // knowledge_class
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Knowledge entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKnowledge_content(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setKnowledge_save_time(cursor.getLong(offset + 2));
        entity.setKnowledge_state(cursor.getInt(offset + 3));
        entity.setKnowledge_class(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Knowledge entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Knowledge entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Knowledge entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "knowledgeList" to-many relationship of KnowledgeClass. */
    public List<Knowledge> _queryKnowledgeClass_KnowledgeList(long knowledge_class) {
        synchronized (this) {
            if (knowledgeClass_KnowledgeListQuery == null) {
                QueryBuilder<Knowledge> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Knowledge_class.eq(null));
                knowledgeClass_KnowledgeListQuery = queryBuilder.build();
            }
        }
        Query<Knowledge> query = knowledgeClass_KnowledgeListQuery.forCurrentThread();
        query.setParameter(0, knowledge_class);
        return query.list();
    }

}
